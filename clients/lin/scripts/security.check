#!/usr/bin/env python

# File: security_checks.py - module to contain security checks for h2gc linux clients
# 
# Status: This is a trival placeholder for security checks,
#     so I can continue development of other things
#     not useful as a standalone test script currently
#
# Preconditions: should be in scripts directory of h2gc client system
#
# Postconditions: 
#     Returns 0 on no error, 1-100 on problem found, by severity.  
#     Error notes > .sad, Log >> .log
#
# 
#

import pdb
import os
import subprocess
import re
import ConfigParser
import StringIO

class SecurityItem:
    def __init__(self):
        self.lastmd5 = ''
        self.currmd5 = ''
    def __str__(self):        
        return ("Security Item Object\n"
                "Last shadow file md5sum: " + str(self.lastmd5) + "\n"
                "Current shadow file md5sum: " + str(self.currmd5) + "\n")
class Status:
    def __init__(self):
        self.overall = 0
        self.sad = "No problems detected with your system security."
    def __str__(self):
        return ("Overall Security Status: " + str(self.overall) + "\n"
                "Current Evaluation of Issues: " + str(self.sad) + "\n")

# Check to see if any user accounts have changed
# Depends on GNU coreutils 8.13
# returns the md5 hash of /etc/shadow
# REFACTOR - might do away with this, it's not a well though out test
#
def check_shadow_status():
    out = '\n'.join(subprocess.check_output(["sudo", "md5sum", "/etc/shadow"]).splitlines())
    md5sum_shadow = StringIO.StringIO(out).readline()
    print "Check Shadow Status says - /etc/shadow md5: " + md5sum_shadow
    try:
        md5hash_only = re.search('(.+)\s+.+', md5sum_shadow).group(1)
    except:
        print "Could not put a valid md5 of shadow file together."
    print "Hash md5: " + md5hash_only
    return md5hash_only

# Check the status of local system security
#
# modifies: security list
#
def get_security_data(security_list, config_p):
    sec_item = SecurityItem()
    sec_item.currmd5 = check_shadow_status()
    sec_item.lastmd5 = config_p.get('Security', 'shadowmd5', 0)    
    security_list.append(sec_item)

# Analyze the security data we have, logging and updating security check files as needed
# modifies: status object, log file, config file with new md5 if necessary
#
def analyze_security_data(security_list, status, config_p):
    
    for item in security_list:
        print item
        if item.currmd5.strip() != item.lastmd5.strip():
            status.overall += 50
            print "Security status +50 because: " + item.currmd5 + " is NOT the same as: " + item.lastmd5 + "\n"
            status.sad = "A user was added or removed, or a password was changed.  We need to make sure that's o.k." 
            config_p.set("Security","shadowmd5",item.currmd5)
        else:
            print "Security status +0 because: " + item.currmd5 + " is the same as: " + item.lastmd5 + "\n"
    return status.overall

# Create the minimum config file that will work if none exists
# args: configparser object handle and a file handle
# returns a configparser object handle or 1 on error
# REFACTOR - needs way more error checking
#
def init_config_file_and_close(parser, config_handle):
    try:
        pdb.set_trace()
        parser.add_section('Security')
        shadow_md5sum = check_shadow_status()
        parser.set('Security', 'shadowmd5', shadow_md5sum)
        parser.write(config_handle)
        config_handle.close()
    except:
        print "Could not initialize parser."
        config_handle.close()
        return 1

    return parser
    
# Get the config file data into a configparser object
# args: configparser handle object and a filename
# returns: a configparser object handle or 1 on error
#
def get_config_and_close(config_handle, full_config):

    parser = ConfigParser.SafeConfigParser()
    
    try:
        parser.read(full_config)
    except ConfigParser.ParsingError, err:
        print "Can't read from config file at all."
        config_handle.close()
        return 1
 
    try: 
        md5out = parser.get('Security', 'shadowmd5', 0)
    except:
        print "Didn't find the security/shadowmd5 option or something like that.  Creating new sections."     
        config_handle.close()
        config_handle = open_file_or_die(full_config, 'w')
        return init_config_file_and_close(parser, config_handle)
        
    config_handle.close()
    return parser

# Open file or die
# attempt to open a file in a somewhat secure way
# args: fully qualified file name, mode
# return: file handle on success, else program exit with return code 1 
#
def open_file_or_die(fq_fn, mode):
    
    if (os.path.isfile(fq_fn)):
        try:
            fh = open(fq_fn, mode)
        except IOError as e:
            print "Security check could not open file: " + fq_fn + " error: " + e + " Exiting."
            exit(1)
        return fh
    else:
        print "File: " + fq_fn + " is not a file. Exiting."
        exit(1)

    
#################################
#
def main():
    status=Status()
    security_list=[]
    config_dir = os.path.expanduser("~") + "/.h2gc/scripts/"
    config_file = "security.conf"
    full_config = config_dir + config_file
    sad_file = "security.sad"
    full_sad = config_dir + sad_file

    config_handle = open_file_or_die(full_config, 'r')    
    config_p = get_config_and_close(config_handle, full_config)

    if config_p == 1:
        print "Config file cannot be initialized.  Not good, really."
        status.sad = "Security check can't read it's config file."
        exit(3)

    get_security_data(security_list, config_p)
    return_code = analyze_security_data(security_list, status, config_p)

    # Open, write entire config file out, close
    # 
    config_handle = open(full_config, 'w')
    config_p.write(config_handle)
    config_handle.close()
 
    # Open write entire sad file out, close
    #
    sad_handle = open(full_sad, 'w')
    sad_handle.truncate()
    print "about to write: " + status.sad + " to: " + full_sad
    sad_handle.write(status.sad)
    sad_handle.close()
    
    exit(return_code)

if __name__ == '__main__':
    main()
