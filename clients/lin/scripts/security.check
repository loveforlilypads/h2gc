#!/usr/bin/env python

# security_checks.py - module to contain security checks for linux clients
# Status: this is mostly a placeholder for security checks, so I can continue development
#

import os
import subprocess
import re
import ConfigParser
import StringIO

class SecurityItem:
    def __init__(self):
        self.lastmd5 = ''
        self.currmd5 = ''
    def __str__(self):        
        return ("Security Item Object\n"
                "Last shadow file md5sum: " + str(self.lastmd5) + "\n"
                "Current shadow file md5sum: " + str(self.currmd5) + "\n")
class Status:
    def __init__(self):
        self.overall = 0
        self.sad = "No problems detected with your fixed storage devices.  Your hard drives, SSDs, etc. are doing fine."
    def __str__(self):
        return ("Overall Fixed Storage Status: " + str(self.overall) + "\n"
                "Current Evaluation of Issues: " + str(self.sad) + "\n")

# Check to see if any user accounts have changed
# Depends on GNU coreutils 8.13
# returns the md5 hash of /etc/shadow
#
def check_shadow_status():
    # REFACTOR - error checking - valid md5 hash string check
    out = '\n'.join(subprocess.check_output(["sudo", "md5sum", "/etc/shadow"]).splitlines())
    md5sum_shadow = StringIO.StringIO(out).readline()
    #print "Shadow md5: " + md5sum_shadow
    try:
        md5hash_only = re.search('(.+)\s+.+', md5sum_shadow).group(1)
    except:
        print "Looks like we don't have a valid md5sum string here here."
    #print "Hash md5: " + md5hash_only
    return md5hash_only

# Check the status of local system security
#
# modifies: security list
#
def check_security_status(security_list, config_p):
    md5item = security_checks.SecurityItem()
    md5item.currmd5 = security_checks.check_shadow_status()
    md5item.lastmd5 = config_p.get('Security', 'shadowmd5', 0)    
    security_list.append(md5item)

# Log analysis of security data to local log file
# modifies: status object, config file with new md5 if necesary
#
def log_security_data(security_list, status, config_p):
    
    for item in security_list:
        print item
        if item.currmd5.strip() != item.lastmd5.strip():
            status.overall += 50
            print "Security status +50 because: " + item.currmd5 + " is NOT the same as: " + item.lastmd5 + "\n"
            config_p.set("Security","shadowmd5",item.currmd5)
        else:
            print "Security status adds zero because: " + item.currmd5 + " is the same as: " + item.lastmd5 + "\n"

# Create the minimum config file that will work if none exists
#
#
def init_config_file(parser, config_handle):
    try:
        parser.add_section('Security')
        shadow_md5sum = security_checks.check_shadow_status()
        parser.set('Security', 'shadowmd5', shadow_md5sum)
        #pdb.set_trace()
        parser.write(config_handle)
    except:
        print "Could not initialize parser."
        return 1

    return parser
    
# Get the config file data into a configparser object
# returns: a configparser object handle or 1 on error
#
def get_config(config_handle, full_config):

    parser = ConfigParser.SafeConfigParser()
    
    try:
        parser.read(full_config)
    except ConfigParser.ParsingError, err:
        print "Can't read from config file at all."
        return 1

    try: 
        md5out = parser.get('Security', 'shadowmd5', 0)
    except:
        print "Didn't find the security/shadowmd5 option or something like that.  Creating new sections."     
        return init_config_file(parser, config_handle)
        
    return parser

#################################
#
def main():
    security_list=[]
    status=Status()
    config_dir = os.path.expanduser("~") + "/.h2gc/scripts/"
    config_file = "security.conf"
    full_config = config_dir + config_file
 
    # Check to see if the file exists, not hte dir
    if (os.path.isdir(config_dir) != True):
        print "Config directory does not exist.  We're screwed."
        #os.makedirs(config_dir, mode=0700)
        # write something out to .sad
        exit(1)

    # Open, read entire config file in, close
    #    
    config_handle = open(full_config, 'r') 
    print "opened full_config"
    config_p = get_config(config_handle, full_config)
    print "completed get_config"
    config_handle.close()

    if config_p == 1:
        print "Config file cannot be initialized.  We need a running mode for this situation.  Exiting."
        sys.exit(1)

    returncode = check_security_status(security_list, config_p)
    log_security_data(security_list, config_p)

    # Open, write entire config file out, close
    # 
    config_handle = open(full_config, 'w+')
    config_p.write(config_handle)
    config_handle.close()
 
    exit(returncode)

if __name__ == '__main__':
    main()
