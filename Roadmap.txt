
Status
======

Very hacky prototype.

Client GUI currently only works on Rich's laptop - a Gnome-shell extension on Ubuntu 12.10 minus evil plus more gnome.
Client Daemon is written in python and should be easy to port to osx winxx.
Notification server currently only runs on Node.js

I grouped the initial TODO list into three sets of tasks.  Ambitiously, these are monthly goal sets for me.
Could be useful after the client is rewritten on lin/win/osx and all packaged up.  That might make for a beta.

First Set:
============

Project has:
      Screen setup - DONE
      Basic makefiles where necessary - DONE
Linux Client GUI has:
      Plain english explanations of problems
      	    * read local file into menu - DONE
      Search link that works
            * open search engine with terms that match problem - DONE
      Collaboration System Link that works
            * open browser to relevant chatroom or group collaboration page - DONE
      Help System Link that works
      	    * take the user to a local page that links to the appropriate wiki page, plus local log file and .teach files - DONE
Linux Client Daemon has:
      Two working trivial system checks that it can run - DONE
      Write out status descriptions, overall status, top priority to files - DONE
Server has:
      Rest server accepts posts from clients of ID and status - DONE
      Rest server notifies ticket system immediately if device status is 1 - DONE
      	   * At same time as insert to db 
      Crappy interface for viewing logs - but most recent first - DONE
      	   * update log Document to: DeviceID, Status, Timestamp and user Document to: Name, Email, DeviceID
	   * View page with most recent first
Mac Client has:
      Existence
	    * use curl and a shell script if you have to, but make it notify something

Bonus Milestones: (these are all just test/demo infrastructure)
=================

Ticket System has: (http://uservoice.com - https://developer.uservoice.com/docs/api/python-sdk/)
      Existence
	    * Recieves tickets in some way from the H2GC server.
Monitoring System has: (local virt running nagios for now) 
      Existence 
	    * Nagios can RCV an alert from a the H2GC server 
Chat System has: (https://kungfuvrobots.hipchat.com/chat)
      Existence:
            * A persistent group chat can be entered into by clients

Second Set:
=============

Project has:
      Overall Makefile for install of all client and server components
      Fixture generator
      	      * fill client and server dbs with data - live server test gen
Server has:
      Cron job that checks rest server database every hour.  
      	      * If any user has no record in last few days, notify ticket system.
      Updated schema - checkin timestamps - map client key to userinfo table
      Homepage that can display user-view of data
Linux Client Daemon has:
      Wizard for checkscript creation
      Sends client key instead of test data
      Creates social_summary for share feature
      Creates support_summary for get help feature
Linux GUI has:
      Local copies of external wiki pages if not on the net.
Mac Client has:
      Same GUI features as Linux client

Bonus Milestones:
=================

Windows Client has:
      Existence
           * background daemon first
      Basic GUI
      	   * same features as linux client GUI

Proof of principle!  Prototype on at least two platforms done!  

Third Set:
==========

Rewrite/refactor linux and mac client components TDD
Write tests for server
Package everything

Fourth Set and Beyond:
======================
Android, iOS clients, glass clients, etc.
Node server logic for determining ticket severity and priority.

Integrations to do:
===================
Email - DONE
      * needs work, but basically have a mechanism
Uservoice
Pagerduty

Blue Sky:
=========
HitchHikers guide to your robot
